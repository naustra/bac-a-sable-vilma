#!/usr/bin/env python3
"""
G√©n√©rateur de documents Word g√©n√©rique
Peut √™tre utilis√© pour n'importe quel th√®me
"""

import json
import os
import argparse
from docx import Document
from docx.shared import Inches
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.enum.text import WD_ALIGN_PARAGRAPH

# Dictionnaire des traductions des titres par th√®me
THEME_TRANSLATIONS = {
    "animaux": {
        "francais": "Animaux",
        "anglais": "Animals"
    },
    "corps_humain": {
        "francais": "Parties du corps",
        "anglais": "Body parts"
    },
    "meteo": {
        "francais": "M√©t√©o",
        "anglais": "Weather"
    },
    "salon": {
        "francais": "Salon",
        "anglais": "Living room"
    },
    "toilette": {
        "francais": "Salle de bain",
        "anglais": "Bathroom"
    }
}

def load_selection_config(theme_name: str) -> dict:
    """Charge la configuration de s√©lection d'un th√®me"""
    config_path = f"themes/{theme_name}/selection.json"

    if not os.path.exists(config_path):
        raise FileNotFoundError(f"Configuration de s√©lection non trouv√©e: {config_path}")

    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def create_word_document(theme_name: str, langue: str = "francais") -> str:
    """
    Cr√©e un document Word pour un th√®me donn√©

    Args:
        theme_name: Nom du th√®me
        langue: Langue du document ("francais" ou "anglais")

    Returns:
        Chemin du document cr√©√©
    """
    # Charger la configuration
    config = load_selection_config(theme_name)

    # Obtenir le titre traduit
    if theme_name in THEME_TRANSLATIONS:
        titre_traduit = THEME_TRANSLATIONS[theme_name][langue]
    else:
        titre_traduit = config['titre']  # Fallback sur le titre original

    print("=" * 80)
    print(f"üìÑ G√âN√âRATION DU DOCUMENT WORD ({langue.upper()})")
    print("=" * 80)

    # Cr√©er le document
    doc = Document()

    # Titre principal
    title = doc.add_heading(titre_traduit, 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Espacement
    doc.add_paragraph()

    # Cr√©er le tableau
    elements = config['elements']
    colonnes = config.get('colonnes', 3)
    lignes = (len(elements) + colonnes - 1) // colonnes  # Arrondi vers le haut

    table = doc.add_table(rows=lignes, cols=colonnes)
    table.alignment = WD_TABLE_ALIGNMENT.CENTER

    # Remplir le tableau
    photos_dir = f"themes/{theme_name}/photos"

    for i, element in enumerate(elements):
        row = i // colonnes
        col = i % colonnes
        cell = table.cell(row, col)

        # Ajouter l'image
        image_path = os.path.join(photos_dir, element['image_selectionnee'])

        if os.path.exists(image_path):
            try:
                # Redimensionner l'image pour qu'elle rentre dans la cellule
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.runs[0] if cell_paragraph.runs else cell_paragraph.add_run()

                # Ajouter l'image
                picture = run.add_picture(image_path, width=Inches(1.5))

                # Centrer l'image
                cell_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

                # Ajouter les textes selon la langue
                cell_paragraph = cell.add_paragraph()
                cell_paragraph.add_run(element['nom_macedonien']).bold = True
                cell_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

                cell_paragraph = cell.add_paragraph()
                if langue == "anglais" and 'nom_anglais' in element:
                    cell_paragraph.add_run(f"({element['nom_anglais']})").italic = True
                    print(f"   ‚úÖ {element['nom_anglais']}: {element['image_selectionnee']}")
                else:
                    cell_paragraph.add_run(f"({element['nom_francais']})").italic = True
                    print(f"   ‚úÖ {element['nom_francais']}: {element['image_selectionnee']}")
                cell_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

            except Exception as e:
                nom_affiche = element['nom_anglais'] if langue == "anglais" and 'nom_anglais' in element else element['nom_francais']
                print(f"   ‚ùå Erreur image {nom_affiche}: {e}")
                nom_fallback = element['nom_anglais'] if langue == "anglais" and 'nom_anglais' in element else element['nom_francais']
                cell.text = f"{element['nom_macedonien']}\n({nom_fallback})"
        else:
            print(f"   ‚ö†Ô∏è  Image manquante: {image_path}")
            nom_fallback = element['nom_anglais'] if langue == "anglais" and 'nom_anglais' in element else element['nom_francais']
            cell.text = f"{element['nom_macedonien']}\n({nom_fallback})"

    # Sauvegarder le document
    output_path = f"themes/{theme_name}/{titre_traduit}.docx"
    doc.save(output_path)

    print(f"\n‚úÖ Document cr√©√© avec succ√®s !")
    print(f"üìÑ Titre : {titre_traduit}")
    print(f"üìä {len(elements)} √©l√©ments")
    print(f"üìê Tableau {lignes} √ó {colonnes}")
    print(f"üìÅ Emplacement : {os.path.abspath(output_path)}")

    return output_path

def create_bilingual_documents(theme_name: str) -> list:
    """
    Cr√©e les documents Word en fran√ßais et en anglais pour un th√®me donn√©

    Args:
        theme_name: Nom du th√®me

    Returns:
        Liste des chemins des documents cr√©√©s
    """
    documents_crees = []

    print(f"üåç G√©n√©ration des documents bilingues pour le th√®me '{theme_name}'")
    print("=" * 80)

    # G√©n√©rer le document fran√ßais
    try:
        doc_fr = create_word_document(theme_name, "francais")
        documents_crees.append(doc_fr)
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du document fran√ßais: {e}")

    print("\n" + "=" * 80)

    # G√©n√©rer le document anglais
    try:
        doc_en = create_word_document(theme_name, "anglais")
        documents_crees.append(doc_en)
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du document anglais: {e}")

    return documents_crees

def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description='G√©n√®re un document Word pour un th√®me donn√©')
    parser.add_argument('theme', help='Nom du th√®me (ex: corps_humain, meteo)')
    parser.add_argument('--preview', action='store_true', help='Affiche la configuration sans g√©n√©rer')
    parser.add_argument('--bilingue', action='store_true', help='G√©n√®re les documents en fran√ßais et en anglais')
    parser.add_argument('--langue', choices=['francais', 'anglais'], default='francais',
                       help='Langue du document (par d√©faut: francais)')

    args = parser.parse_args()

    try:
        if args.preview:
            config = load_selection_config(args.theme)
            print(f"üìã Configuration du th√®me '{args.theme}':")
            print(f"   Titre: {config['titre']}")
            print(f"   √âl√©ments: {len(config['elements'])}")
            print(f"   Colonnes: {config.get('colonnes', 3)}")
            if args.theme in THEME_TRANSLATIONS:
                print(f"   Traductions disponibles:")
                for langue, titre in THEME_TRANSLATIONS[args.theme].items():
                    print(f"     {langue}: {titre}")
            return

        if args.bilingue:
            # G√©n√©rer les deux versions
            documents_crees = create_bilingual_documents(args.theme)
            print(f"\nüí° {len(documents_crees)} document(s) cr√©√©(s):")
            for doc in documents_crees:
                print(f"   üìÑ {doc}")
        else:
            # G√©n√©rer une seule version
            output_path = create_word_document(args.theme, args.langue)
            print(f"\nüí° Le document est pr√™t : {output_path}")

    except FileNotFoundError as e:
        print(f"‚ùå Erreur: {e}")
        print(f"üí° T√©l√©chargez d'abord les images avec:")
        print(f"   python telecharger_images.py {args.theme}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()
