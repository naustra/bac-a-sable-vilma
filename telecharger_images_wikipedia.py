#!/usr/bin/env python3
"""
Script pour t√©l√©charger l'image principale d'articles Wikipedia
Utilise l'API Wikipedia (pas besoin de cl√© API)
"""

import requests
import json
import os
from pathlib import Path
from typing import Dict, Optional
import time

class WikipediaImageDownloader:
    """T√©l√©chargeur d'images principales depuis Wikipedia"""

    API_URL = "https://en.wikipedia.org/w/api.php"

    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'EducationalImageDownloader/1.0 (educational use)'
        })

    def get_main_image(self, article_title: str) -> Optional[Dict]:
        """
        R√©cup√®re l'image principale d'un article Wikipedia

        Args:
            article_title: Titre de l'article (ex: "Human eye")

        Returns:
            Dictionnaire avec les infos de l'image ou None
        """
        # √âtape 1 : R√©cup√©rer le titre de l'image principale
        params = {
            'action': 'query',
            'format': 'json',
            'titles': article_title,
            'prop': 'pageimages',
            'piprop': 'original',
            'pithumbsize': 1000
        }

        response = self.session.get(self.API_URL, params=params)
        response.raise_for_status()
        data = response.json()

        pages = data.get('query', {}).get('pages', {})
        page = next(iter(pages.values()))

        if 'original' not in page:
            print(f"‚ö†Ô∏è  Pas d'image principale trouv√©e pour '{article_title}'")
            return None

        image_url = page['original']['source']
        image_width = page['original']['width']
        image_height = page['original']['height']

        return {
            'url': image_url,
            'width': image_width,
            'height': image_height,
            'article': article_title
        }

    def download_image(self, url: str, save_path: str) -> tuple[bool, Optional[str]]:
        """
        T√©l√©charge une image depuis une URL et d√©tecte le vrai format

        Args:
            url: URL de l'image
            save_path: Chemin o√π sauvegarder l'image

        Returns:
            (succ√®s, chemin_final) - Le chemin peut changer si l'extension √©tait incorrecte
        """
        try:
            response = self.session.get(url, stream=True)
            response.raise_for_status()

            # Lire les premiers bytes pour d√©tecter le format
            content = response.content

            # D√©tecter le vrai format
            if content.startswith(b'<svg') or content.startswith(b'<?xml'):
                print(f"‚ö†Ô∏è  Format SVG d√©tect√©, ignor√© (pas compatible Word)")
                return False, None
            elif content.startswith(b'\x89PNG'):
                extension = '.png'
            elif content.startswith(b'\xff\xd8\xff'):
                extension = '.jpg'
            else:
                print(f"‚ö†Ô∏è  Format non reconnu")
                return False, None

            # Ajuster l'extension si n√©cessaire
            base_path = os.path.splitext(save_path)[0]
            final_path = base_path + extension

            # Cr√©er le dossier parent si n√©cessaire
            Path(final_path).parent.mkdir(parents=True, exist_ok=True)

            # Sauvegarder l'image
            with open(final_path, 'wb') as f:
                f.write(content)

            return True, final_path

        except Exception as e:
            print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
            return False, None

    def download_article_image(self, article_title: str, output_path: str) -> tuple[bool, Optional[str]]:
        """
        T√©l√©charge l'image principale d'un article Wikipedia

        Args:
            article_title: Titre de l'article Wikipedia
            output_path: Chemin de destination pour l'image

        Returns:
            (succ√®s, chemin_final) - Le chemin peut diff√©rer si l'extension √©tait incorrecte
        """
        print(f"\nüìñ Article: {article_title}")

        # R√©cup√©rer l'info de l'image
        image_info = self.get_main_image(article_title)

        if not image_info:
            return False, None

        print(f"üì∏ Image trouv√©e: {image_info['width']}x{image_info['height']} px")

        # T√©l√©charger
        success, final_path = self.download_image(image_info['url'], output_path)
        if success:
            print(f"‚úÖ T√©l√©charg√©: {final_path}")
            return True, final_path

        return False, None


def main():
    """Test avec quelques articles"""
    downloader = WikipediaImageDownloader()

    # Test avec des articles sur le corps humain
    articles = [
        ("Human eye", "themes/corps_humain/photos/oeil_wiki.jpg"),
        ("Human nose", "themes/corps_humain/photos/nez_wiki.jpg"),
        ("Human hand", "themes/corps_humain/photos/main_wiki.jpg"),
        ("Heart", "themes/corps_humain/photos/coeur_wiki.jpg"),
    ]

    for article, output in articles:
        downloader.download_article_image(article, output)
        time.sleep(0.5)  # Pause pour ne pas surcharger l'API


if __name__ == "__main__":
    main()

