#!/usr/bin/env python3
"""
Script pour cr√©er un document sur le corps humain
avec images depuis Wikipedia (image principale des articles)
"""

from telecharger_images_wikipedia import WikipediaImageDownloader
from telecharger_images_wikimedia import WikimediaDownloader
from convertir_images import convertir_images_pour_docx
import json
import os
import subprocess

def main():
    """T√©l√©charge les images et cr√©e la configuration"""

    # Configuration du th√®me
    theme_dir = "themes/corps_humain"
    photos_dir = os.path.join(theme_dir, "photos")

    # Cr√©er le dossier si n√©cessaire
    os.makedirs(photos_dir, exist_ok=True)

    # Liste des parties du corps
    # Format: (mac√©donien, fran√ßais, article_wikipedia, fallback_query_wikimedia)
    parties_corps = [
        ("–≥–ª–∞–≤–∞", "t√™te", "Human head", "human face portrait"),
        ("–æ–∫–æ", "≈ìil", "Human eye", "human eye close up"),
        ("–Ω–æ—Å", "nez", "Human nose", "human nose close up"),
        ("—É—Å—Ç–∞", "bouche", "Mouth", "human mouth lips"),
        ("—Ä–∞–∫–∞", "main", "Hand", "human hand"),
        ("–Ω–æ–≥–∞", "jambe", "Human leg", "human leg"),
        ("—Å—Ä—Ü–µ", "c≈ìur", "Heart", "human heart"),
        ("—Å—Ç–æ–º–∞–∫", "estomac", "Stomach", "human stomach"),
        ("—É–≤–æ", "oreille", "Ear", "human ear"),
        ("–∫–æ—Å–∞", "cheveux", "Hair", "human hair"),
    ]

    # T√©l√©charger les images
    wiki_downloader = WikipediaImageDownloader()
    wikimedia_downloader = WikimediaDownloader()

    print("=" * 80)
    print("üìö T√âL√âCHARGEMENT DES IMAGES")
    print("=" * 80)

    elements = []

    for mac, fr, article, fallback_query in parties_corps:
        print(f"\n{'='*80}")
        print(f"üîç {fr.upper()} ({mac})")
        print(f"{'='*80}")

        # Nom du fichier
        filename_base = fr.lower().replace('≈ì', 'oe')
        image_file = None

        # Essayer d'abord Wikipedia (image principale de l'article)
        output_path = os.path.join(photos_dir, f"{filename_base}_1.jpg")

        success, final_path = wiki_downloader.download_article_image(article, output_path)
        if success and final_path:
            image_file = os.path.basename(final_path)
        else:
            # Fallback sur Wikimedia Commons
            print(f"‚ö†Ô∏è  Pas d'image principale, essai avec Wikimedia Commons...")
            wikimedia_downloader.search_and_download(
                query=fallback_query,
                output_dir=photos_dir,
                count=1,
                filename_prefix=filename_base
            )
            # V√©rifier si une image a √©t√© t√©l√©charg√©e
            for ext in ['jpg', 'jpeg', 'png']:
                possible_file = f"{filename_base}_1.{ext}"
                if os.path.exists(os.path.join(photos_dir, possible_file)):
                    image_file = possible_file
                    break

        if image_file:
            elements.append({
                "nom_macedonien": mac,
                "nom_francais": fr,
                "image_selectionnee": image_file
            })
            print(f"‚úÖ {fr}: {image_file}")
        else:
            print(f"‚ùå {fr}: Aucune image trouv√©e")

    # Convertir les images en JPEG baseline compatible python-docx
    print("\n" + "=" * 80)
    print("üîÑ CONVERSION DES IMAGES")
    print("=" * 80)
    
    conversions = convertir_images_pour_docx(photos_dir)
    
    # Mettre √† jour les noms de fichiers dans elements
    for element in elements:
        old_name = element["image_selectionnee"]
        if old_name in conversions:
            element["image_selectionnee"] = conversions[old_name]
            print(f"   {old_name} ‚Üí {conversions[old_name]}")
    
    print(f"‚úÖ {len(conversions)} images converties" if conversions else "‚úÖ Images d√©j√† au bon format")
    
    # Cr√©er le fichier de configuration
    print("\n" + "=" * 80)
    print("üìù CR√âATION DU FICHIER DE CONFIGURATION")
    print("=" * 80)

    config = {
        "theme": "corps_humain",
        "titre": "–î–µ–ª–æ–≤–∏ –Ω–∞ —Ç–µ–ª–æ—Ç–æ",
        "colonnes": 3,
        "elements": elements
    }

    config_path = os.path.join(theme_dir, "selection.json")
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ Configuration sauvegard√©e: {config_path}")
    print(f"üìä {len(elements)} √©l√©ments configur√©s")

    # G√©n√©rer le document
    print("\n" + "=" * 80)
    print("üìÑ G√âN√âRATION DU DOCUMENT WORD")
    print("=" * 80)

    result = subprocess.run(
        ['python', 'generer_document_theme.py', 'corps_humain'],
        capture_output=True,
        text=True
    )

    print(result.stdout)
    if result.stderr:
        print(result.stderr)

    if result.returncode == 0:
        print("\n" + "=" * 80)
        print("‚úÖ TERMIN√â !")
        print("=" * 80)
        print(f"\nüìÅ Dossier: {theme_dir}/")
        print(f"üì∏ Images: {photos_dir}/")
        print(f"üìÑ Document: {theme_dir}/Corps Humain.docx")
    else:
        print(f"\n‚ùå Erreur lors de la g√©n√©ration du document (code {result.returncode})")


if __name__ == "__main__":
    main()

