#!/usr/bin/env python3
"""
T√©l√©chargeur d'images g√©n√©rique multi-sources
Peut √™tre utilis√© pour n'importe quel th√®me
"""

from telecharger_images_multi_sources import MultiSourceImageDownloader
from convertir_images import convertir_images_pour_docx
from config_api import check_api_keys
import json
import os
import time
import argparse

def load_theme_config(theme_name: str) -> dict:
    """Charge la configuration d'un th√®me depuis le fichier JSON"""
    config_path = f"themes/{theme_name}/config.json"
    
    if not os.path.exists(config_path):
        raise FileNotFoundError(f"Configuration non trouv√©e: {config_path}")
    
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def download_images_for_theme(theme_name: str) -> dict:
    """
    T√©l√©charge les images pour un th√®me donn√©
    
    Args:
        theme_name: Nom du th√®me (ex: "corps_humain", "meteo")
        
    Returns:
        Dictionnaire {nom_francais: meilleure_image}
    """
    # Charger la configuration du th√®me
    config = load_theme_config(theme_name)
    
    print("=" * 80)
    print(f"üöÄ T√âL√âCHARGEMENT MULTI-SOURCES - {config['titre'].upper()}")
    print("=" * 80)
    print(f"üìä {len(config['elements'])} √©l√©ments √† traiter")
    print(f"üì∏ {config['images_par_element']} images par √©l√©ment")
    print(f"‚ö° Parall√©lisme: {config.get('max_workers', 20)} t√©l√©chargements simultan√©s")
    print("=" * 80)
    
    # V√©rifier les cl√©s API
    print("üîë V√©rification des cl√©s API...")
    api_ok = check_api_keys()
    if not api_ok:
        print("‚ö†Ô∏è  Certaines sources ne seront pas disponibles, mais on continue...")
    
    # Configuration des dossiers
    theme_dir = f"themes/{theme_name}"
    photos_dir = os.path.join(theme_dir, "photos")
    os.makedirs(photos_dir, exist_ok=True)
    
    # Pr√©parer les donn√©es pour le t√©l√©chargement
    words_data = []
    for element in config['elements']:
        words_data.append((
            element['mot_anglais'],
            element['nom_francais'],
            element['nom_macedonien']
        ))
    
    # T√©l√©charger les images en parall√®le
    downloader = MultiSourceImageDownloader(max_workers=config.get('max_workers', 20))
    results = downloader.download_multiple_words_parallel(words_data, photos_dir)
    
    # Convertir les images en JPEG baseline compatible python-docx
    print("\n" + "=" * 80)
    print("üîÑ CONVERSION DES IMAGES")
    print("=" * 80)
    
    conversions = convertir_images_pour_docx(photos_dir)
    
    # Cr√©er la configuration finale
    elements = []
    for element in config['elements']:
        french_name = element['nom_francais']
        image_file = results.get(french_name)
        
        if image_file:
            # Mettre √† jour le nom si converti
            if image_file in conversions:
                image_file = conversions[image_file]
            
            elements.append({
                "nom_macedonien": element['nom_macedonien'],
                "nom_francais": french_name,
                "image_selectionnee": image_file
            })
        else:
            print(f"‚ö†Ô∏è  {french_name}: Aucune image trouv√©e")
    
    # Sauvegarder la configuration finale
    print("\n" + "=" * 80)
    print("üìù CR√âATION DU FICHIER DE CONFIGURATION")
    print("=" * 80)
    
    final_config = {
        "theme": theme_name,
        "titre": config['titre'],
        "colonnes": config.get('colonnes', 3),
        "elements": elements
    }
    
    config_path = os.path.join(theme_dir, "selection.json")
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(final_config, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Configuration sauvegard√©e: {config_path}")
    print(f"üìä {len(elements)} √©l√©ments configur√©s")
    
    return results

def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description='T√©l√©charge des images pour un th√®me donn√©')
    parser.add_argument('theme', help='Nom du th√®me (ex: corps_humain, meteo)')
    parser.add_argument('--dry-run', action='store_true', help='Affiche la configuration sans t√©l√©charger')
    
    args = parser.parse_args()
    
    try:
        if args.dry_run:
            config = load_theme_config(args.theme)
            print(f"üìã Configuration du th√®me '{args.theme}':")
            print(f"   Titre: {config['titre']}")
            print(f"   √âl√©ments: {len(config['elements'])}")
            print(f"   Images par √©l√©ment: {config.get('images_par_element', 6)}")
            return
        
        start_time = time.time()
        results = download_images_for_theme(args.theme)
        end_time = time.time()
        
        total_time = end_time - start_time
        total_images = sum(len(v) if isinstance(v, list) else 1 for v in results.values())
        
        print("\n" + "=" * 80)
        print("‚úÖ T√âL√âCHARGEMENT TERMIN√â !")
        print("=" * 80)
        print(f"\n‚è±Ô∏è  Temps total: {total_time:.1f} secondes")
        print(f"üìä {len(results)} √©l√©ments trait√©s avec succ√®s")
        print(f"üìà Vitesse: {total_images/total_time:.1f} images/seconde")
        
        print(f"\nüí° Prochaine √©tape:")
        print(f"   python generer_document.py {args.theme}")
        
    except FileNotFoundError as e:
        print(f"‚ùå Erreur: {e}")
        print(f"üí° Cr√©ez d'abord la configuration avec:")
        print(f"   python create_theme.py {args.theme}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()
