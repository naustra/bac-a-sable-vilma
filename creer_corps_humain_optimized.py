#!/usr/bin/env python3
"""
Script optimis√© pour cr√©er un document sur le corps humain
T√©l√©chargements parall√®les + conversion automatique + g√©n√©ration
"""

from telecharger_images_wikipedia_optimized import WikipediaImageDownloaderOptimized
from telecharger_images_wikimedia import WikimediaDownloader
from convertir_images import convertir_images_pour_docx
import json
import os
import subprocess
import time

def main():
    """T√©l√©charge les images et cr√©e la configuration - VERSION OPTIMIS√âE"""
    
    start_time = time.time()
    
    # Configuration du th√®me
    theme_dir = "themes/corps_humain"
    photos_dir = os.path.join(theme_dir, "photos")
    
    # Cr√©er le dossier si n√©cessaire
    os.makedirs(photos_dir, exist_ok=True)
    
    # Liste des parties du corps avec articles Wikipedia
    # Format: (article_wikipedia, prefix_fichier, nom_francais, nom_macedonien)
    parties_corps = [
        ("Human head", "tete", "t√™te", "–≥–ª–∞–≤–∞"),
        ("Human eye", "oeil", "≈ìil", "–æ–∫–æ"),
        ("Human nose", "nez", "nez", "–Ω–æ—Å"),
        ("Mouth", "bouche", "bouche", "—É—Å—Ç–∞"),
        ("Hand", "main", "main", "—Ä–∞–∫–∞"),
        ("Human leg", "jambe", "jambe", "–Ω–æ–≥–∞"),
        ("Heart", "coeur", "c≈ìur", "—Å—Ä—Ü–µ"),
        ("Stomach", "estomac", "estomac", "—Å—Ç–æ–º–∞–∫"),
        ("Ear", "oreille", "oreille", "—É–≤–æ"),
        ("Hair", "cheveux", "cheveux", "–∫–æ—Å–∞"),
    ]
    
    print("=" * 80)
    print("üöÄ T√âL√âCHARGEMENT OPTIMIS√â - CORPS HUMAIN")
    print("=" * 80)
    print(f"üìä {len(parties_corps)} parties du corps √† traiter")
    print(f"‚ö° Parall√©lisme: {min(8, len(parties_corps))} t√©l√©chargements simultan√©s")
    print("=" * 80)
    
    # T√©l√©charger les images en parall√®le
    downloader = WikipediaImageDownloaderOptimized(max_workers=8)
    
    articles_data = [(article, prefix, french) for article, prefix, french, _ in parties_corps]
    results = downloader.download_multiple_articles_parallel(articles_data, photos_dir)
    
    # Fallback pour les articles sans images
    print("\n" + "=" * 80)
    print("üîÑ FALLBACK SUR WIKIMEDIA COMMONS")
    print("=" * 80)
    
    wikimedia_downloader = WikimediaDownloader()
    fallback_queries = {
        "t√™te": "human face portrait",
        "≈ìil": "human eye close up",
        "nez": "human nose close up", 
        "bouche": "human mouth lips",
        "main": "human hand",
        "jambe": "human leg",
        "c≈ìur": "human heart",
        "estomac": "human stomach",
        "oreille": "human ear",
        "cheveux": "human hair"
    }
    
    for article, prefix, french, mac in parties_corps:
        if french not in results:
            print(f"\n‚ö†Ô∏è  Fallback pour {french}...")
            wikimedia_downloader.search_and_download(
                query=fallback_queries[french],
                output_dir=photos_dir,
                count=1,
                filename_prefix=prefix
            )
            # Chercher le fichier t√©l√©charg√©
            for ext in ['jpg', 'png']:
                possible_file = f"{prefix}_1.{ext}"
                if os.path.exists(os.path.join(photos_dir, possible_file)):
                    results[french] = possible_file
                    print(f"‚úÖ {french}: {possible_file}")
                    break
    
    # Convertir les images en JPEG baseline compatible python-docx
    print("\n" + "=" * 80)
    print("üîÑ CONVERSION DES IMAGES")
    print("=" * 80)
    
    conversions = convertir_images_pour_docx(photos_dir)
    
    # Cr√©er la configuration finale
    elements = []
    for article, prefix, french, mac in parties_corps:
        image_file = results.get(french)
        
        if image_file:
            # Mettre √† jour le nom si converti
            if image_file in conversions:
                image_file = conversions[image_file]
            
            elements.append({
                "nom_macedonien": mac,
                "nom_francais": french,
                "image_selectionnee": image_file
            })
        else:
            print(f"‚ö†Ô∏è  {french}: Aucune image trouv√©e")
    
    # Sauvegarder la configuration
    print("\n" + "=" * 80)
    print("üìù CR√âATION DU FICHIER DE CONFIGURATION")
    print("=" * 80)
    
    config = {
        "theme": "corps_humain",
        "titre": "–î–µ–ª–æ–≤–∏ –Ω–∞ —Ç–µ–ª–æ—Ç–æ",
        "colonnes": 3,
        "elements": elements
    }
    
    config_path = os.path.join(theme_dir, "selection.json")
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Configuration sauvegard√©e: {config_path}")
    print(f"üìä {len(elements)} √©l√©ments configur√©s")
    
    # G√©n√©rer le document
    print("\n" + "=" * 80)
    print("üìÑ G√âN√âRATION DU DOCUMENT WORD")
    print("=" * 80)
    
    result = subprocess.run(
        ['python', 'generer_document_theme.py', 'corps_humain'],
        capture_output=True,
        text=True
    )
    
    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print(result.stderr)
    
    end_time = time.time()
    total_time = end_time - start_time
    
    if result.returncode == 0:
        print("\n" + "=" * 80)
        print("‚úÖ TERMIN√â AVEC SUCC√àS !")
        print("=" * 80)
        print(f"\n‚è±Ô∏è  Temps total: {total_time:.1f} secondes")
        print(f"üìÅ Dossier: {theme_dir}/")
        print(f"üì∏ Images: {photos_dir}/")
        print(f"üìÑ Document: {theme_dir}/Corps Humain.docx")
        print(f"\nüöÄ Performance: {len(parties_corps)/total_time:.1f} articles/seconde")
    else:
        print(f"\n‚ùå Erreur lors de la g√©n√©ration du document (code {result.returncode})")
        print(f"‚è±Ô∏è  Temps √©coul√©: {total_time:.1f} secondes")


if __name__ == "__main__":
    main()
