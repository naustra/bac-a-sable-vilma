#!/usr/bin/env python3
"""
Module de scoring d'images avec CLIP (OpenAI)
Utilise le mod√®le CLIP pour calculer la pertinence d'images par rapport √† des requ√™tes textuelles
"""

import os
import json
import glob
from pathlib import Path
from typing import List, Dict, Tuple
import torch
from PIL import Image
from transformers import CLIPProcessor, CLIPModel
import warnings

# Supprimer les warnings de transformers
warnings.filterwarnings("ignore", category=UserWarning)

class CLIPImageScorer:
    """Scorer d'images utilisant le mod√®le CLIP d'OpenAI"""

    def __init__(self, model_name: str = "openai/clip-vit-base-patch32"):
        """
        Initialise le scorer CLIP

        Args:
            model_name: Nom du mod√®le CLIP √† utiliser
        """
        print("üîÑ Chargement du mod√®le CLIP...")
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"   üì± Device: {self.device}")

        try:
            self.model = CLIPModel.from_pretrained(model_name)
            self.processor = CLIPProcessor.from_pretrained(model_name)
            self.model.to(self.device)
            print("‚úÖ Mod√®le CLIP charg√© avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement du mod√®le CLIP: {e}")
            raise

    def score_image(self, image_path: str, text_query: str) -> float:
        """
        Calcule le score de similarit√© entre une image et une requ√™te textuelle

        Args:
            image_path: Chemin vers l'image
            text_query: Requ√™te textuelle (ex: "human eye close up")

        Returns:
            Score de similarit√© entre 0 et 1
        """
        try:
            # Charger et traiter l'image
            image = Image.open(image_path).convert("RGB")
            inputs = self.processor(
                text=[text_query],
                images=image,
                return_tensors="pt",
                padding=True
            )

            # D√©placer sur le device appropri√©
            inputs = {k: v.to(self.device) for k, v in inputs.items()}

            # Calculer les embeddings
            with torch.no_grad():
                outputs = self.model(**inputs)
                logits_per_image = outputs.logits_per_image
                probs = logits_per_image.softmax(dim=-1)

            return float(probs[0][0])

        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors du scoring de {image_path}: {e}")
            return 0.0

    def score_batch(self, image_paths: List[str], text_query: str) -> List[Dict]:
        """
        Score plusieurs images en batch pour plus d'efficacit√©

        Args:
            image_paths: Liste des chemins d'images
            text_query: Requ√™te textuelle

        Returns:
            Liste de dictionnaires avec les scores
        """
        results = []

        for image_path in image_paths:
            if not os.path.exists(image_path):
                print(f"‚ö†Ô∏è  Image introuvable: {image_path}")
                continue

            score = self.score_image(image_path, text_query)
            results.append({
                'path': image_path,
                'filename': os.path.basename(image_path),
                'score': score
            })

        return results

    def find_images_for_prefix(self, photos_dir: str, prefix: str) -> List[str]:
        """
        Trouve toutes les images correspondant √† un pr√©fixe

        Args:
            photos_dir: Dossier contenant les photos
            prefix: Pr√©fixe des fichiers (ex: "oeil")

        Returns:
            Liste des chemins d'images trouv√©es
        """
        patterns = [
            os.path.join(photos_dir, f"{prefix}_*.jpg"),
            os.path.join(photos_dir, f"{prefix}_*.jpeg"),
            os.path.join(photos_dir, f"{prefix}_*.png")
        ]

        image_paths = []
        for pattern in patterns:
            image_paths.extend(glob.glob(pattern))

        return sorted(image_paths)

    def select_best_images(self, theme_dir: str, parties_corps_config: List[Dict]) -> None:
        """
        S√©lectionne les meilleures images pour chaque partie du corps et g√©n√®re selection.json

        Args:
            theme_dir: Dossier du th√®me (ex: "themes/corps_humain")
            parties_corps_config: Configuration des parties du corps
        """
        photos_dir = os.path.join(theme_dir, "photos")

        if not os.path.exists(photos_dir):
            print(f"‚ùå Dossier photos introuvable: {photos_dir}")
            return

        print("\n" + "=" * 80)
        print("üéØ SCORING DES IMAGES AVEC CLIP")
        print("=" * 80)

        elements = []

        for partie in parties_corps_config:
            nom_francais = partie['nom_francais']
            nom_macedonien = partie['nom_macedonien']
            requete = partie['requete_wikimedia']
            prefix = partie['prefix']

            print(f"\nüîç Scoring images pour {nom_francais} ({nom_macedonien})")
            print(f"   üìù Requ√™te: '{requete}'")

            # Trouver toutes les images pour ce pr√©fixe
            image_paths = self.find_images_for_prefix(photos_dir, prefix)

            if not image_paths:
                print(f"   ‚ö†Ô∏è  Aucune image trouv√©e pour le pr√©fixe '{prefix}'")
                continue

            print(f"   üì∏ {len(image_paths)} images trouv√©es")

            # Scorer toutes les images
            scored_images = self.score_batch(image_paths, requete)

            if not scored_images:
                print(f"   ‚ùå Aucune image scorable")
                continue

            # Trier par score d√©croissant
            scored_images.sort(key=lambda x: x['score'], reverse=True)

            # Afficher les scores
            for i, img in enumerate(scored_images):
                status = "‚≠ê MEILLEURE" if i == 0 else ""
                print(f"   üì∏ {img['filename']} ‚Üí Score: {img['score']:.3f} {status}")

            # S√©lectionner la meilleure
            best_image = scored_images[0]
            elements.append({
                "nom_macedonien": nom_macedonien,
                "nom_francais": nom_francais,
                "image_selectionnee": best_image['filename']
            })

            print(f"   ‚úÖ S√©lectionn√©e: {best_image['filename']}")

        # G√©n√©rer le fichier selection.json
        config = {
            "theme": "corps_humain",
            "titre": "–î–µ–ª–æ–≤–∏ –Ω–∞ —Ç–µ–ª–æ—Ç–æ - –ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏",
            "colonnes": 3,
            "elements": elements
        }

        config_path = os.path.join(theme_dir, "selection.json")
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

        print(f"\n‚úÖ Configuration sauvegard√©e: {config_path}")
        print(f"üìä {len(elements)} √©l√©ments s√©lectionn√©s")


def main():
    """Fonction de test du module"""
    scorer = CLIPImageScorer()

    # Test avec une image
    test_image = "themes/corps_humain/photos/oeil_1.jpg"
    if os.path.exists(test_image):
        score = scorer.score_image(test_image, "human eye close up")
        print(f"Score de test: {score:.3f}")
    else:
        print("Image de test introuvable")


if __name__ == "__main__":
    main()
